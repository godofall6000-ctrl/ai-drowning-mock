version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      target: production
    ports:
      - "5000:5000"
    environment:
      - DROWNING_ENV=production
      - API_HOST=0.0.0.0
      - API_PORT=5000
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Training service
  training:
    build:
      context: .
      target: training
    environment:
      - DROWNING_ENV=production
      - MLFLOW_TRACKING_URI=http://mlflow:5001
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    profiles:
      - training
    depends_on:
      - mlflow

  # MLflow tracking server
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_ARTIFACT_STORE_URI=./mlruns
    volumes:
      - ./mlflow:/mlflow
    profiles:
      - training

  # TensorBoard for visualization
  tensorboard:
    image: tensorflow/tensorflow:latest
    ports:
      - "6006:6006"
    volumes:
      - ./logs:/logs
    command: tensorboard --logdir /logs --host 0.0.0.0 --port 6006
    profiles:
      - training

  # Database for metadata (optional)
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=drowning_detection
      - POSTGRES_USER=drowning_user
      - POSTGRES_PASSWORD=drowning_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    profiles:
      - full

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    profiles:
      - full

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: drowning_detection_network